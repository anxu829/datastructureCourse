# coding: utf-8
"""
求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。
ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。


解答思路：
首先要知道以下规律：


从 1 至 10，在它们的个位数中，1出现了 1 次；
从 1 至 100，在它们的十位数中，1出现了 10 次；
从1至1000，在它们的百位数中，1出现了100次；


      依次类推，从 1 至 10 i，在它们的左数第二位(右数第 i 位)，1出现了 (10 i-1)次。这个规律很容易验证。

我们以n=21345为例来使用这个规律。

      首先分析个位1出现了几次。从1~21340数字1总共出现了2134*1次，最后剩下21341、21342、21343、21344、21345，所有还出现1次数字1。所以个位共出现1的次数为2135次。

      接下来分析十位中1出现了几次。从1~21300数字1总共出现了213*10次，剩下的数字从 21301至 21345，它们最大的十位数是 4 > 1，所以还有10次。所以十位共出现2140次。

      接下来分析百位中1出现了几次。从1~21000数字1共出现了21*100次。剩下的数字是21001~21345，最大的千位数是3，大于1，所以还有100次。所以百位中1共出现了2200次。

      接下来分析千位中1出现了几次。从1~20000数字1共出现了2*1000次。剩下的数字是20001~21345，最大的千位数是1，等于1，这种情况稍微比较复杂，因为它并不包括所有千位为1的数字，即1000个，这种情况取决于低位上的数字，为345+1=346次。最后总计2346次。

      接下来分析万位中1出现了几次。因为它是最高位了因此直接看最高位的数字，即2,2>1。很显然10000~19999中1在万位共出现了10000次。如果最高位等于1那就和上一步的思想一样。

"""
# -*- coding:utf-8 -*-
class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
      # write code here
      # 首先把n 变成字符串

      str_n = str(n)
      t = 0
      for loc in range(1,len(str_n)+1):
            
            realLoc = len(str_n)  - loc
            key = int(str_n[realLoc])
            mode = n // 10 ** loc
            big_part = mode * 10**(loc-1)

            if key > 1:
                  small_part = 10 ** (loc-1)
            else:
                  if str_n[realLoc + 1 : ] != '':
                        small_part = key + int(str_n[realLoc + 1 : ])
                  else:
                        small_part = key
            
            print(big_part,small_part , big_part+small_part )
            t = t + big_part + small_part
      return t 


if __name__  == "__main__":
    n = 10
    t = Solution().NumberOf1Between1AndN_Solution(n)
    print(t)

    

